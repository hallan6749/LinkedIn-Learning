Seven ways to apply service management
Adopting and adapting ITIL need not be a heavyweight, top-down affair, layered on top of existing work as extra work to do like rolling a giant boulder up a hill. A lighter weight approach is possible and I argue better suited to today's lean, agile and DevOps-oriented individuals, teams and organizations. Service management began being light weight. Based on Jan Carlzon's conception of "Moments of Truth." The idea that processes are what people do. And that working on interactions among people, what he called moments of truth, was the right approach. Sounds like the agile manifesto's people over process, doesn't it? In fact, in early ITIL books, the word process was used interchangeably with discipline. I like discipline a whole lot more because a discipline is something individuals and teams must apply themselves to learn. It's something that you do and that you reflect and act on that you must practice to master. It's not something someone else does that you have to comply with. The process-heavy concept of service management is a holdover from the process re-engineering era where the focus was making end-to-end processes predictable and consistent. While this is still a good approach for certain situations, it's a problem if it's the only approach you use. I call this the engineering a force approach where people try to install processes like software. The problem with this approach is that there's no ask of individuals and teams to learn and think and act and drive towards shared outcomes and change their behavior with your help. Making these asks are what I call the enact and enable approach where you do more than simply ask people to comply with processes. Many publications give guidance on organizational-level end-to-end process engineering so we'll skip this discussion entirely. ITIL 4 replaces the heavy process and function process of ITIL v3 with a focus on practices which aim for the same outcomes but which may or may not include processes and functions. Practices in ITIL 4 are more like disciplines. Something you and your team need to learn, practice and do to become good at. Now, let's look at the approaches I've come to reply on. I hope you'll find them refreshingly helpful and better suited to today's work environment and agile, lean practices.

Enact outcomes
Now, let's look at the approaches I've come to rely on. I hope you'll find them refreshing and helpful and better suited to today's work environment and Agile Lean practices. The first way is enacting and enabling outcomes, focusing on outcomes over activities, that is, ends versus means, and making driving towards those outcomes how we do things around here. There are two approaches to managing things, broadly speaking, focusing on activities or means or focusing on outcomes or ends. ITIL intends to be outcome-focused, but ITIL publications spend many pages describing activities. Perhaps as a result, there are a lot of process activity step-oriented ITIL implementations where the why or outcome of what we're doing all this for gets lost. We don't want that here. In our approach to implementing service management, outcomes are everything. You can think of each of the 18 practices covered in ITIL Foundation in terms of their outcomes. Ideally, you as an individual, your team, and the overall organization are driving towards those outcomes and are driven to achieve and maintain a set of desired states for those outcomes. In fact, you can think of each of the topic areas ITIL Foundation covers as a set of outcomes that you as an individual, your team, and your organization overall should be driving towards, keeping in a known good state. So a key here is making sure all three levels get it, the outcomes of service management, and get on with it. They're driving towards those outcomes. Many people think of practices, which can include processes and functions, as what is engineered, what's on paper. The idea, they say, is process engineering and documentation gives us clarity and consensus. But in the end, often what comes out of these kinds of approaches is a document with no bearing on what people are actually doing in the organization. Practices aren't what's on paper. They're what people do toward shared outcomes. So for example, the outcome of change control is to minimize the business disruption of change and to track what changed. If I take a snapshot of the activities of everyone in your organization over a 24-hour period that's directed towards that outcome, well, that's your change management practice. So if practices are what people do, what we should do is focus on where practices really reside, between people's ears and in their interactions or moments of truth. So to improve practice outcomes, we focus in two places. First, between people's ears to ensure they get it, the why and what of each practice. And second, on their interactions and the setting they actually take place in. High-performance organizations make driving toward shared outcomes how we do things around here. They have a laser-like focus on the key outcomes worth managing and keeping them in a desired state, keeping them green or good versus red or bad or yellow or degraded or gray or unknown. So make outcomes over processes your mantra and develop a shared understanding in your team and throughout your organization of the outcomes of the 18 practices included in ITIL Foundation. Think of the outcomes as the ends in mind, the goals, the desired states you want to achieve and maintain over time in changing technology and business circumstances.

Enable outcomes
So how do we reach outcomes? For some scenarios we should seek one best way and set up deterministic mechanisms to ensure consistency and efficiency, but this approach can cause issues where it's the only approach we use and it's not matched to the situation at hand. That's where the concept of equifinality and of deterministic, adaptive, and emergent practices comes in. Equifinality is the idea that compliance and irrational variation scenarios aside, it may be okay and even preferable to allow multiple paths to achieve the same outcome. This better fits with the situation of continual and accelerating change we find ourselves in today, where all our perfectly arranged activities may become irrelevant quickly with changing time and circumstance. I've created a model of three types of practices. Deterministic with a machine-like set of rules residing in automation and policies is aimed at certainty like McDonald's. With McDonald's you get your chicken nuggets in say, 60 seconds or so and they'll always come out looking and tasting the same. The idea is to produce the best outcome through mechanization. Next we have adaptive, which should be increasingly familiar to you as these are the practices in Agile where we have buckets of activities and patterns and practices, so we're not simply winging it, but our aim is adaptability to produce the best outcome in response to a changing situation. Emergent practices are for completely new to you situations, like the first time you do container orchestration, there's no precedent. The aim is surviving and thriving, where the best outcome is produced through continual reflection and action adjustment based on what's learned. All three practice types are valid. The choice of which to use should be driven by the situations. You might say, well, hang on. You're saying it's okay to have equifinality, multiple paths to the same outcomes on the one hand. On the other hand, I learned in my lean IT course and my ITO course that variation is our enemy. That we should relentlessly reduce variation. So if we allow for three types of practices here, aren't we introducing unnecessary variation? My short answer is no. Like a gyroscope, you should be constantly driving towards faster time to value, and that requires relentlessly reducing unnecessary variation but removing emotive practice that's better suited to the situation at hand isn't the same thing as reducing unnecessary variation. Especially when an accelerated pace of change is introduced. We don't have the luxury here of all fixed and slow-changing processes and systems.

Enlighten and empower people
The second way is enlightening and empowering people, focusing on people's skills, knowledge, and mindsets and empowering them for action. If I can only do one thing when adopting and adapting ITIL, it will be to work mostly between the ears of people of the organization, so they get it, the outcomes of service management, and get on with it, drive towards those outcomes. Enlightening and empowering people is especially important today. Years ago computing was simpler. One person could actually get the whole system in mind. Today, systems are so complex that no one person can have them all in mind. So for example, if I'm a change manager, there can only be so much expectation that I can know and make the right choice around changes for Python, or MongoDB, or Chef, or Puppet, and so on. What I really should be good at is facilitation and to rely on others to bring the knowledge forward for their patch. So with today's level of complexity and change, there is no good alternative to everyone understanding and driving towards shared outcomes. For change management that would be getting consumers the changes they need quickly with quality, minimizing the business impact of change, and being able to track what changed. Everyone is needed to make that happen. Here's what bad looks like. We design processes, tools, and so on, the way we design software and deploy them to those who must execute and ensure they do it. This is the engineer and enforce approach. In situations like regulatory compliance, this approach is unavoidable and necessary, but even then, true success comes with people getting, and getting on with the outcomes. The better way is to enlighten and empower people to ensure that they know the outcomes to drive towards and then to help them do it. Expect them to do what they can do within their circle of influence and to ask for help to do even better. If you think of practices as what people do, driving towards practice outcomes as enabled or disabled by tools of the documentation, this makes sense. In this you, your job is to ensure the people grasp and drive towards outcomes and to ensure they have the right skills, knowledge, mindset, and tools to succeed. As shown in this model adopted from John Cotter, if people want to drive towards outcomes, there may still be barriers to them doing so or a lack of enablers to help them along. Empowering people is about removing or reducing barriers to acting and providing or amplifying enablers for action.

Reduce barriers and increase enablers
The third way is lowering barriers and increasing enablers to effective action, with force field analysis being the key technique here. The beauty of this approach is that individuals, teams, and organizations can take action on whatever the blockers are to outcomes, making individuals, teams, and organizations more responsive in changing conditions. Lowering barriers and increasing enablers is a key technique in lean, Agile, and DevOps organizations because it allows for flexibility and the unanticipated. It is our approach for improving things, for solving problems, and pursuing opportunities wherever we find them, like between people's ears, in key moments of truth, and in the settings they take place in. One way to do this is through force field analysis. Force field analysis is a technique developed by Kurt Levine. Force field analysis is the simple mechanism we can apply to move in the right direction in a virtuous cycle towards outcomes that are important to us. It helps us to understand the driving and restraining forces that are maintaining a present state or that we must consider to drive towards a desired state. The technique is simple, but powerful. Here's how you do it. Brainstorm the set of enablers that are the driving forces and the set of barriers that are obstacles to change. Then, identify actions to add or amplify enablers and remove or minimize barriers. Prioritize based on effort and impact and pick a subset of actions to change the current state and move towards the desired state for things worth managing. Another simple mechanism for lowering barriers and increasing enablers is SWOT analysis. SWOT stands for strengths, weaknesses, opportunities, and threats. Strengths and opportunities are internal, while weaknesses and threats are external. SWOT is great because it's a simple technique that can be done in house without having to pay consultants for help. SWOT is a great way to assess strengths and to see how to leverage them for maximum benefit and return and to identify opportunities to improve practices and services and to quantify weaknesses, especially relative to alternatives for your services. And finally, to identify threats from natural disasters to hostile takeovers to new regulations, SWOT helps you get on the same page learning and improving together.

Improve moments of truth
The fourth way is improving moments of truth. Where moments of truth are key interactions among people, we improve these moments by both improving the interaction itself as well as the setting in which it takes place. Jan Carlzon was a key figure early in service management. He orchestrated a turnaround at SAS Airlines by focusing everyone on improving moments of truth. This approach focused on making key micro transactions great, stands in stark contrast to the end to end process reengineering thinking and approach. This lean and agile approach to service management, prominent at service management's inception, got displaced in the reengineering era by a more heavy handed, end to end process engineering approach. The pendulum is now swinging the other direction, back to lightweight, lean, agile, and DevOps approaches. The fourth way, improving moments of truth, take up Jan's idea focusing on what people do. Once I had a salesperson come to me at work and ask, "Hey Dave, what do people do here at R and D all day long?" I say, "Well, they have meetings. They send emails and texts. They write documents. They make presentations and so on, why?" She asked, "if we could make each of those better, wouldn't that make R and D better?" I had to agree and the idea stuck with me. This of what Idle is telling you. We should have CAB meetings. You should prepare SLAs. You should communicate changes, handle major incidents, report service levels and so on. If you want to improve your practices, and those practices are what people do, then the right approach is to improve people's interactions in the setting they take place in. For example, I had a client with such a polite culture they never raised risks, not even in CAB meetings. And we hung posters saying here's the CAB agenda and the steps were you raise risks so they started doing so. The poster said to do it, so it wasn't impolite. Other examples, often the biggest improvements are simple like having two people sit next to each other who didn't communicate well at a distance or moving a CAB meeting to the operations center, where it had been conducted over the den of server fans. Now you might ask, wait are you suggesting we optimize the micro, won't that 

Bring the first four ways together
So here's a quick recap of the first four ways to bring them all together. In the first way we enact and enable outcomes. To do so, we work between the ears, making driving towards the outcomes how we do things around here. How I work, how you should judge me, how you work, and how I should judge your work, and how ultimately customers and users will judge our results together. In the second way, we enlighten and empower people. We work on them having the skills, knowledge, mindset and tools necessary to succeed, and are empowering them to do so. In the third way, we lower barriers and increase enablers to make the right outcomes happen as frictionlessly as possible. We do this by adding and amplifying enablers, and by removing or reducing barriers to achieving and sustaining outcomes. And lastly in the fourth way, we work to improve moments of truth, key interactions between people, and are improving the setting those interactions take place in. I'm recapping these here now to highlight how different this approach is, and why we value it over engineering and enforcing end-to-end process activities. I've laid out the seven ways here in the style of the Agile Manifesto, because it contrasts them with other approaches in use in organizations that are either overused or used exclusively, and that often don't work so well. The manifesto format helps us see what we value and over what as a basis for how we work together. Here you see the first four ways highlighted. Each way is a statement of what we value. Juxtaposed here against engineering and enforcing end-to-end process activities. As with the Agile Manifesto, it's not that the things in the right aren't important or useful, they are or can be. It's just that we find the things in the left more important and useful.

Root out variation
While many implementation approaches focus on end-to-end processes, the macro level stuff. What often gets overlooked is working on moments of truth, key interactions between people and systems, the micro level stuff. Like how we run a post-implementation review meeting. Focus you application improvement efforts on key moments of truth. Some people look to getting process out of the way, removing checks and balances to get faster time to value. But simply removing process gates isn't the real answer. Think about it, why do we have to meet about a change or a release or anything? Why? Because of variation and dependencies that if not sorted will have us shooting ourselves and others in the proverbial foot. The right approach that vastly reduces the amount of overhead required for service management, that number one contributor to making it lightweight, is to aggressively root out unnecessary complexity, variation, and dependency. If you do nothing else, taking this advice back on the job should pay huge dividends. More on that and all this later, on with the manifesto. The fifth way is relentlessly rooting out unnecessary complexity, variation, and dependencies that are the source of so much overhead and waste in organizations. It's a good assumption that you're technical if you're watching this, so I'll use a technology example to illustrate perhaps the most important point I can make to you on how to go about applying idle foundation concepts. It's the X.25 Protocol. X.25 was a networking protocol that was great for use in places where you couldn't count on nice, clean circuits because it had super high error correcting overhead. You knew those packets were going to get through eventually. It was necessary and useful for those circumstances. Along comes fiber, and now you can count on nice, clean circuits, and you don't need all that overhead. Here's the point, just as the amount of protocol overhead required is a function of how messy or clean the circuits used are, the amount of overhead you'll need in reaching the outcomes of all the idle processes 

Root out dependency
Pets are all unique. We give them names, they're all cute and so on. It's kind of like what we do with traditional servers, really, each has a name. This one has a utility drive, it's unique. This one does not, it's unique. This one's running one version of the software, this one's not, how cute. Well, not really. Because wherever we have these variations, we must meet and talk about stuff. When we must change something, or where we have a release, or we have a problem, it takes longer to figure out problems, incidents, risks and so on. It adds overhead all the way up and down the stack, so it's not so cute. What we want is cattle. Everything looks the same. As with the cloud and infrastructure's code, where the question, how is it unique, isn't needed as each is the same. Reducing unnecessary variation independencies is key to successfully IDLE. As their presence in development and delivery erodes product and service quality. This includes variations in dependencies in skills and knowledge and how practices are performed in terminology, hardware and software. Practices must be repeatable and artifacts standardized for high quality and value at high velocity. Variation in irrational dependencies are our number one enemy. A client of mine had nagging issues with switch configurations because the three bands of switches they were buying all had different default settings for different perimeters. Leaving daylight for misconfiguration. Going to one model of switch relieved the whole set of issues. Our other enemy besides variation is dependencies. Why do we need to meet to discuss a change? Or package changes into monolithic releases? Dependencies. They drive process overhead. Lose the dependencies and you lose the overhead. Including dependencies inherent in our technology, infrastructures, platforms, applications and services 

Lower transaction costs
What comes first? Culture or technology? Culture and choice of tools of work practices affect each other. I suggest you work on using technology to lower transaction cost and to make things more ready to hand over, working only or mostly on culture. Think about it: Handing someone a food processor, which is technology, gets you to the right culture faster, and right results faster, and installing the virtues of chopping food faster. For example, if you ships software on DVDs, the cost of pulling back a mistake is huge. But if you're using the cloud, using blue-green deployment, you can pull it back at little or no cost. And why dig for status when you can have a transparent uptime page? Lowering transaction cost, and making things more ready to hand, helps create the right results in culture. The sixth way is lowering transaction cost, making things more ready to hand. Think of this as reducing the amount of time, effort and clicks it takes to do things. We value the sixth way, lowering transaction cost and making things ready to hand, over mostly or only working directly on culture. Service management is about bringing value to stakeholders through services quickly, with quality. Our capability to do so is a function of our tooling and culture. While tooling and culture affect each other, tools can make an agile culture possible. For example, if you have continuous integration and delivery and blue-green deployment, you can have a much faster time to value in quality because transaction costs are lower. Transaction cost of; for example, introducing a new feature, or feature set, or a release, or a returning to a known-good prior state. So in general, my advice in implementing ideal concepts is to find a way to lower transaction cost in services, processes, loans of truth, and so on. This idea is based on Ronald Coase's Theorem of Transaction Costs, which really forms the basis of agile service management; as well as, lean, agile, strum endeavor. 

Reflect and act
Many ITIL adaptations are top down, organizational level efforts only or mostly. Actions taken mimic downloading and trying to install processes like software. There's no ask of individuals or teams to reflect and act. I advocate what I call the sandwich approach. For a sandwich to stay together, it needs a top slice and a bottom slice. And to be satisfying, it needs a tasty middle bit. The work of organizations is the top slice. The reflection and action of individuals is the bottom slice that keeps it from falling apart. And the work of teams is the tasty middle bit. This is the seventh way: reflecting and acting at the individual and team level within our circles of influence as well as at the organizational level. In this way, we value the reflection and action of individuals, teams in the organization over only or mostly organizational level efforts. In this way, reflection and action is expected, encouraged, and supported at the individual and team as well as the organizational level. This approach differs from approaches where most, if not all effort is expended at the organizational level, top down, by essential team. While organizational level effort is necessary, it is not enough for success. For service management to stick, reflection and action must be done at all three levels: the organization, teams, and individuals. All three levels must get it, the outcomes of service management, and get on with it, drive towards them. The idea is that at all levels, people know what to drive towards. They don't wait. They work within their circle of influence and ask for what they need to do even better. For example, ITIL tells you to put all your golden bits, your OEM software, your Bless scripts, and software licenses and documentation, and one known good source, the DML. And when you build that in production, you pull from it. So you don't have to waste time looking for things or hurt yourself and others because you built stuff from the wrong, old, invalid source code and so on. 